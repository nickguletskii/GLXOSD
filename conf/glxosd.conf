##### NOTES ###########################################################################
# The syntax of this configuration file is very basic.                                #
# Each line is either a comment (starts with a #), or a key-value pair.               #
# The key and value are separated by the first equals sign.                           #
# ALL TRAILING AND LEADING WHITESPACE WILL BE LOST!!!                                 #
# If you want to preserve the whitespace in the value, surround the value with quotes.#
#######################################################################################

##### TEXT SETTINGS #####

# The name of the font to be used.
font_name = CPMono_v07 Bold

# The size of the font to be used.
font_size_int = 16

# DPI (horizontal). When this property is not set, GLXOSD will attempt to auto-detect
# the value from your first screen.
#font_dpi_horizontal_int = 72

# DPI (vertical). When this property is not set, GLXOSD will attempt to auto-detect
# the value from your first screen.
#font_dpi_vertical_int = 72

# The colour of the text in RGBA. 0 = no light, 255 = maximum light. For example:
# 0  , 0  , 0  , 255 is black.
# 255, 0  , 0  , 255 is red.
# 0  , 255, 0  , 255 is green.
# 0  , 0  , 255, 255 is blue.
# 255, 255, 255, 255 is white.
# 255, 0  , 255, 255 is magenta.
# 255, 255, 255, 128 is half-transparent white.
font_colour_r_int = 255
font_colour_g_int = 0
font_colour_b_int = 255
font_colour_a_int = 255

# The colour of the text outline in RGBA.
font_outline_colour_r_int = 0
font_outline_colour_g_int = 0
font_outline_colour_b_int = 0
font_outline_colour_a_int = 255

# Width of the outline, in points (pt). Can be a real number, e.g. 1.5
font_outline_width_float = 1

# Toggles the outline. Deprecated.
# Set to true and set width to zero if you don't want the outline.
show_text_outline_bool = true

# Position of the text in pixels, starting from the top left corner.
text_pos_x_int = 4
text_pos_y_int = 4

# Spacing between characters, in points (pt). Can be a real number, e.g. 1.5
text_spacing_x_float = 0

# Spacing between lines, in points (pt). Can be a real number, e.g. 1.5
text_spacing_y_float = 0

# Key combo for toggling the OSD. This string must consist of the following values (case sensitive)
# separated by + (a plus, no whitespace) and each value can only occur once:
# "Shift", "Ctrl", "Alt", X11 key symbol name
# Where X11 key code is the name for the key. You can find a list of them here:
# http://cgit.freedesktop.org/xorg/proto/xproto/plain/keysymdef.h
# For example:
# #define XK_F10                           0xffc7
# This means that the key symbol name is "F10".
#
# You can leave this blank to disable this key combo.
#
# Examples:
# Ctrl+Shift+F10
# Ctrl+Shift+H
# Alt+Shift+TAB
osd_toggle_keycombo = "Shift+F10"

# Key for toggling VSync
vsync_toggle_keycombo = "Shift+F11"

# Key combo for toggling frame logging. Pressing this key will start/stop frame timing logging.
# You can leave this blank to disable this key combo.
# Please see osd_toggle_keycombo for documentation on the format of this property. 
frame_logging_toggle_keycombo = "Shift+F9"

# If true, GLXOSD will not immediately write frame timings to disk. Instead, it will keep them
# in memory and write them to disk at the very end.
frame_log_keep_in_memory_bool = false

# The message to display on the OSD while logging frame timings.
frame_logging_message_string = "Logging frame timings..."

# The message to display on the OSD when the frame timing log is being written to disk.
# Only applies if frame_log_keep_in_memory_bool is set to true.
frame_logging_dump_in_progress_message_string

# The directory into which the framelogs will be written.
# If you want fair results, please set this to a location on a fast filesystem, e.g. ramfs.
frame_log_directory_string = "/tmp/"

# The amount of time after which the frame logging will automatically stop in milliseconds.
# Set this to 0 if you don't want frame logging to stop automatically.
frame_logging_duration_ms = 0

##### GENERAL INFORMATION SETTINGS #####

# !!! ATTENTION! This project uses Boost Format! For more information, open the link below! !!!
# http://www.boost.org/doc/libs/1_53_0/libs/format/doc/format.html#syntax

# The format string for the FPS. The only argument is a floating point number that represents the FPS.
fps_format = FPS: %1$.1f\n

# The format for temperature strings.
temperature_format = %1$.0f C

##### LIBSENSOR INFORMATION SETTINGS #####

# The format string that gets printed for each chip that reports temperature through libsensors.
# The only argument is the name of the chip.
libsensors_chip_format = %1%:\n

# The format string that prints the feature name and it's temperature.
# For each chip, there are different "features".
# For example, an Intel 2500k has 5 temperature sensors - one is a general sensor, and a sensor for each core.
# Each temperature sensor will be in it's own "feature".
# The first argument is the name of the feature, and the second argument is the temperature string (not a number).
libsensors_chip_feature_format = " %1%: %2%\n"

# This is a filter for chips.
# If you don't want to monitor specific devices, this is for you.
# Chips with names that match this regex (Boost Xpressive variation) will not be displayed. 
libsensors_chip_filter = NULL
# For example, the following line contains a filter that will hide Nouveau temperature information.
#libsensors_chip_filter = Nouveau.*

# This is a filter for features of chips.
# If you don't want to see the temperatures of different cores, or something similar, this is for you.
# Features with names that match this regex (Boost Xpressive variation) will not be displayed.
libsensors_chip_feature_filter = NULL
# For example, the following line contains a filter that will hide individual core information on a 2500k.
#libsensors_chip_feature_filter = Core.*
# AMD users will have to write regexes like this:
#libsensors_chip_feature_filter = "((IN[0-9]+|5vsb|vbat|fan[0-9]+|\+5v)\:.*)"

##### NVIDIA INFORMATION SETTINGS #####

# The format string for NVIDIA GPU temperatures (if you have an NVIDIA graphics card and NVCTRL).
# The first argument is the name of the graphics card, e.g. "GeForce GTX 560 Ti".
# The second argument is the ID of the graphics card.
# The third argument is the temperature string (not a number).
nvidia_gpu_format = %1% (%2%): %3%\n
